buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'mysql:mysql-connector-java:8.0.30'
        classpath 'org.flywaydb:flyway-gradle-plugin:9.4.0'
    }
}


plugins {
	id 'org.springframework.boot' version '2.7.5-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'eclipse'
	id "org.flywaydb.flyway" version "9.4.0"
	id 'jacoco'
}

group = 'com.happinesea'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.hibernate.validator:hibernate-validator:6.0.17.Final'
	implementation 'org.springframework.data:spring-data-bom:2020.0.0-M1'

	
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-core'
}

eclipse{
    project {
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
      	natures 'org.eclipse.buildship.core.gradleprojectnature'
    }
    classpath {
        file {
            whenMerged { cp->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('build/generated/src/main/java', null) )
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.path = 'org.eclipse.jdt.launching.JRE_CONTAINER'
            }
        }
    }
} 

tasks.named('test') {
	useJUnitPlatform()
}

tasks.eclipse.doFirst {
    File prefs = file(".settings/org.eclipse.buildship.core.prefs")
    if(!prefs.exists()){
        prefs.append('''
            connection.project.dir=
            eclipse.preferences.version=1
            '''.stripIndent())
    }
}

// test report
test.finalizedBy jacocoTestReport
def coverageExcludeFiles = [
        // 内部クラスやLambda匿名クラスを排除
        '**/*$*.class',
        '**/*$lambda$*.class',
]
jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: coverageExcludeFiles)
        })
    }
}

//https://flywaydb.org/documentation/
flyway {
    url = 'jdbc:h2:mem:crawler;DB_CLOSE_ON_EXIT=TRUE;MODE=MySQL'
    user = 'sa'
    password = ''
}